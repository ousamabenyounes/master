<?php

namespace Users\UserManageBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * signatureRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class signatureRepository extends EntityRepository
{
 
 public function insert_signature($form, $session ) {
          $signature = new signature(); ##Creating signature entity object (Users\UsermanageBundle\Entity\signature)
          $login_details = $session->get('exap');
         $user_type = isset( $login_details[0]['usertype'] )?$login_details[0]['usertype'] :$login_details[1]['usertype'] ;
         $user_id = isset( $login_details[0]['userid'] )?$login_details[0]['userid'] :$login_details[1]['userid'];
          $entity_manager = $this->getEntityManager(); //access entity manager from inside the repository		  
			// Fill the entity 
                     $signature->setAccountId($session->get('account_id') );
                     $signature->setSignatureTitle($form['signatureTitle']->getData());
					 $signature->setSignature($form['signature']->getData());
                     $signature->setUserType( $user_type );
                     $signature->setCreatedBy( $user_id );
                     $signature->setCreatedAt( date_create( date( 'Y-m-d H:i:s' ) ) );
                     $signature->setSignatureStatus($form['signatureStatus']->getData());
                     
					  
					  // update the entity
					  $entity_manager->persist( $signature ); 
					  $entity_manager->flush();
	}
    
     /*
          update_signature() function is used to update the signature data from database       
          param : @$request type array
                  @$session type array
                  
     */
    	public function update_signature( $request = null ) {
	 
	         $id               =  $request->get('id');
             $signature_title  =  $request->get('signatureTitle');
             $signature        =  $request->get('signature');
             $signature_status =  $request->get('signatureStatus');
			 $modified_date    =  date_create( date( 'Y-m-d H:i:s' ) );
              
               $entity_manager = $this->getEntityManager(); //access entity manager from inside the repository
               try{
                 $query = $entity_manager->createQueryBuilder()
                                        ->update('UsersUserManageBundle:signature', 's')
                                        ->set('s.signatureTitle', ':signature_title')
                                        ->set('s.signature', ':signature')
                                        ->set('s.signatureStatus', ':signature_status')
										->set('s.modifiedAt', ':modified_date')
                                        ->where('s.id = ?1')
                                        ->setParameter('signature_title', $signature_title)
                                        ->setParameter('signature', $signature)
                                        ->setParameter('signature_status', $signature_status)
										->setParameter('modified_date', $modified_date)
                                        ->setParameter(1, $id)
                                        ->getQuery()->execute();
                     return true;                  
                }catch(\Exception $e){
                     $logger = $this->get('logger');
                     $logger->error($e->getMessage());
                    return false;
                    
                }                        
	}
    
    
    /*
           signatures() is used to fetch signature's input from database
                 
           params : @$signature_params type array
                     @$entity_manager type object
                 
                     
           return : array
        */
	public function signatures( $signature_params ) {
	          $entity_manager = $this->getEntityManager(); //access entity manager from inside the repository
              $query = $entity_manager->createQueryBuilder()
                                      ->select('s') 
                                      ->from('UsersUserManageBundle:signature','s');
                                     
     
                                      
			 $search_params = array();	
              if(!empty( $signature_params['id'] ) && isset( $signature_params['id'] )) {
                 $query = $query->where( $query->expr()->eq( 's.id', '?1'  ) );
                 $search_params['1'] = $signature_params[ 'id'  ];
              }
              
              if( !empty( $signature_params[ 'selected_tab'  ] ) && $signature_params[  'selected_tab'  ] != 3 ){
                  $query = $query->where( $query->expr()->eq( 's.signatureStatus', '?1'  ) );
                  $search_params['1'] = $signature_params[ 'selected_tab'  ];
              }
             

              $query = $query->setParameters( $search_params );
              
             $query = $query->getQuery();
              
             return $query->getArrayResult( ); ##array of signatures objects
	}
    
    public function signature_status( $id = null ) {
        $entity_manager = $this->getEntityManager(); //access entity manager from inside the repository
		$modified_date    =  date_create( date( 'Y-m-d H:i:s' ) );
         try{
                 $query = $entity_manager->createQueryBuilder()
                                        ->update('UsersUserManageBundle:signature', 's')
                                        ->set('s.signatureStatus', ':signature_status')
										->set('s.modifiedAt', ':modified_date')
                                        ->where('s.id = ?1')
                                        ->setParameter('signature_status', 2)
										->setParameter('modified_date', $modified_date)
                                        ->setParameter(1, $id)
                                        ->getQuery()->execute();
                     return true;                  
                }catch(\Exception $e){
                     $logger = $this->get('logger');
                     $logger->error($e->getMessage());
                    return false;
                    
                }  
    }
}
