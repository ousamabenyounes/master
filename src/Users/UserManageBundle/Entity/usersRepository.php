<?php

namespace Users\UserManageBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * usersRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class usersRepository extends EntityRepository
{
   public function check_login( $userName, $password ) {
   
    $entity_manager = $this->getEntityManager(); //access entity manager from inside the repository
    $query = $entity_manager->createQuery(  'SELECT u FROM UsersUserManageBundle:users u 
                                              WHERE
                                              u.username = :name 
                                              AND
                                              u.password = :password'
                                          );
                ## Setting parameters to search                                    
                $query->setParameters( array( 'name'      =>  $userName,
                                              'password'  =>  $password,
                                            )
                                );
                                         
                return $query->getArrayResult( ); //array of users objects 
    }

 public function update_reseller( $request ) {
    
     $entity_manager = $this->getEntityManager(); //access entity manager from inside the repository
     $query = $entity_manager->createQueryBuilder()
                                        ->update( 'UsersUserManageBundle:users', 'u' )
                                        ->set( 'u.salutation', ':salutation' )
                                        ->set( 'u.firstName', ':firstname' )
                                        ->set( 'u.lastName', ':lastname' )
                                        ->set( 'u.isTestAccount', ':is_test_account' )
                                        ->set( 'u.accountType', ':account_type')
										->set( 'u.email', ':email')
										->set( 'u.status', ':status')
                                        ->where( 'u.createdBy = :createdby')
                                        ->andwhere( 'u.id = ?1' )
                                        ->setParameter( 'salutation',       $request->get('salutation') )
                                        ->setParameter( 'firstname',        $request->get('first_name') )
                                        ->setParameter( 'lastname',         $request->get('last_name') )
                                        ->setParameter( 'is_test_account',  $request->get('is_test_account') )
                                        ->setParameter( 'account_type',     $request->get('account_type') )
										->setParameter( 'email',            $request->get('email') )
										->setParameter( 'status',           $request->get('status') )
                                        ->setParameter( 'createdby',        'admin' )
                                        ->setParameter( 1,                  $request->get('id') ) 
                                        ->getQuery()->execute();
       }

   public function user_details( $id ) {
       $entity_manager = $this->getEntityManager(); //access entity manager from inside the repository
       return  $entity_manager->createQueryBuilder()
                                    ->select('u') 
                                    ->from('UsersUserManageBundle:users','u')
                                    ->where('u.id = :id')
                                    ->setParameter('id', $id)
                                    ->getQuery()
                                    ->getArrayResult( );
 }
 
	public function insert_reseller( $form, $session ) {
	        $users = new users(); ##Creating user entity object (Users\UsermanageBundle\Entity\users)
             $entity_manager = $this->getEntityManager(); //access entity manager from inside the repository	
	             ## Fill entity values
				  $users->setUsername( $form['username']->getData() );
				  $users->setPassword( $form['password']->getData() );              
				  $users->setStatus( $form['status']->getData() );
				  $users->setAccountType( $form['account_type']->getData() );
				  $users->setCreatedOn( date_create( date( 'Y-m-d H:i:s' ) ) );              
				  $users->setFirstName( $form['first_name']->getData() );
				  $users->setLastName( $form['last_name']->getData() );
				  $users->setEmail( $form['email']->getData() );
				  $users->setSalutation( $form['salutation']->getData() );
				  $users->setIsTestAccount( $form['is_test_account']->getData() );
				  $users->setUserType( '2' );
				  $users->setCreatedBy( 'admin' );
				  $users->setAccountId( $session->get('id') );
				  $users->setresellerId( 0 );
				 
				  // update the entity
				  $entity_manager->persist( $users ); 
				  $entity_manager->flush();
	}
	
	
	  /*
           __resellers() is used to fetch user's input from database
                 
           params : @$reseller_params type array
                     @$entity_manager type object
                     @$apply_limit type boolean
                     
           return : array
        */
	public function resellers( $reseller_params, $entity_manager, $apply_limit = false  ) {
	          $entity_manager = $this->getEntityManager(); //access entity manager from inside the repository
              $query = $entity_manager->createQueryBuilder()
                                      ->select('u') 
                                      ->from('UsersUserManageBundle:users','u')
                                      ->where('u.userType = 2');
									  
	          if( $apply_limit )
              {
                  $query = $query->setFirstResult( $reseller_params[ 'offset' ] )
                                  ->setMaxResults( $reseller_params[ 'limit' ] );
              }
              
              $search_params = array();
              
              if( !empty( $reseller_params[ 'selected_tab'  ] ) && $reseller_params[  'selected_tab'  ] != 3 ){
                  $query = $query->andwhere( $query->expr()->eq( 'u.status', '?1'  ) );
                  $search_params[ '1' ] = $reseller_params[ 'selected_tab'  ];
              }
              if( !empty( $reseller_params[ 'search_option' ] ) && !empty( $reseller_params[ 'search_value' ] ) ){
              
                switch( $reseller_params[ 'search_option'  ] ){
                
                  CASE 'first_name':
                    $query = $query->andWhere( 'u.firstName=:first_name' );
                    
                  BREAK;
                  
                  CASE 'last_name':
                    $query = $query->andWhere( 'u.lastName=:last_name' );
                    
                  BREAK;
                  
                  CASE 'email':
                    $query = $query->andWhere( 'u.email=:email' );
                    
                  BREAK;
                  
                }
                $search_params[ $reseller_params[ 'search_option' ] ] = $reseller_params[ 'search_value'  ];
              }

              $query = $query->setParameters( $search_params );
              
              $query = $query->getQuery();
              
              return $query->getArrayResult( ); ##array of users objects
	}
	
	
	public function check_username( $username ) {
	
	        $entity_manager = $this->getEntityManager(); //access entity manager from inside the repository
            $query = $entity_manager->createQuery( 'SELECT u FROM UsersUserManageBundle:users u 
                                                   WHERE
                                                   u.username = :name'
                                                  );

            $query->setParameters(  array( 'name' =>  $username ));
            return $query->getArrayResult( ); // array of users objects 
	}
	
	/*public function agent_details( $id ) {
	
	    $entity_manager = $this->getEntityManager(); //access entity manager from inside the repository
	  return  $entity_manager->createQueryBuilder()
                                    ->select('u') 
                                    ->from('UsersUserManageBundle:users','u')
                                    ->where('u.id = :id')
                                    ->setParameter('id', $id)
                                    ->getQuery()
                                    ->getArrayResult( );
    }*/
	
	
	public function update_agent( $request , $session ) {
	 
	         $id             =  $request->get('id');
             $firstname      =  $request->get('first_name');
             $lastname       =  $request->get('last_name');
             $email          =  $request->get('email');
             $email2         =  $request->get('email2');
             $primary_phone  =  $request->get('primary_phone');
             $phone2         =  $request->get('phone2');
             $email          =  $request->get('email');  
             $email2         =  $request->get('email2');  
             $title          =  $request->get('title');  
             $salutation     =  $request->get('salutation');
             $reseller_id    =  $session->get( 'userid' );
            
               $entity_manager = $this->getEntityManager(); //access entity manager from inside the repository
                $query = $entity_manager->createQueryBuilder()
                                        ->update('UsersUserManageBundle:users', 'u')
                                        ->set('u.firstName', ':firstname')
                                        ->set('u.lastName', ':lastname')
                                        ->set('u.email', ':email')
                                        ->set('u.email2', ':email2')
                                        ->set('u.primaryPhone', ':primary_phone')
                                        ->set('u.phone2', ':phone2') 
                                        ->set('u.title', ':title')
                                        ->set('u.salutation', ':salutation')
                                        ->where('u.id = ?1')
                                        ->andwhere('u.resellerId = ?2')
                                        ->setParameter('firstname', $firstname)
                                        ->setParameter('lastname', $lastname)
                                        ->setParameter('email', $email)
                                        ->setParameter('email2', $email2)
                                        ->setParameter('primary_phone', $primary_phone)
                                        ->setParameter('phone2', $phone2)
                                        ->setParameter('title', $title)
                                        ->setParameter('salutation', $salutation)
                                        ->setParameter(1, $id)
                                        ->setParameter(2, $reseller_id)
                                        ->getQuery()->execute();
	}
	
	public function insert_agent($form, $session ) {
          $users = new users(); ##Creating user entity object (Users\UsermanageBundle\Entity\users)
          $entity_manager = $this->getEntityManager(); //access entity manager from inside the repository		  
			// Fill the entity 
					  $users->setSalutation($form['salutation']->getData());
					  $users->setTitle($form['title']->getData());
					  $users->setFirstName($form['first_name']->getData());
					  $users->setLastName($form['last_name']->getData());
					  $users->setUsername($form['username']->getData());
					  $users->setPassword($form['password']->getData());
					  $users->setPrimaryPhone($form['primary_phone']->getData());
					  $users->setPhone2($form['phone2']->getData());
					  $users->setEmail($form['email']->getData());  
					  $users->setEmail2($form['email2']->getData());
					  $users->setResellerId( $session->get( 'userid' ) );
					  $users->setCreatedBy('reseller');
					  $users->setCreatedOn( date_create( date('Y-m-d H:i:s') ) );
					  $users->setUserType('4');
					  $users->setStatus('1');
					  $users->setAccountId( $session->get('id') );
					
					  
					  // update the entity
					  $entity_manager->persist( $users ); 
					  $entity_manager->flush();
	}
	
	public function inactive_user($id) {
              $entity_manager = $this->getEntityManager(); //access entity manager from inside the repository		
	                     $query = $entity_manager->createQueryBuilder()
                                    ->update( 'UsersUserManageBundle:users', 'u' )
                                    ->set( 'u.status', '0' )
                                    ->where( 'u.id = ?1' )                              
                                    ->setParameter( 1, $id )                              
                                    ->getQuery()->execute();
	}
	
	public function inactive_account_agent($account_id) {
              $entity_manager = $this->getEntityManager(); //access entity manager from inside the repository		
	                     $query = $entity_manager->createQueryBuilder()
                                    ->update( 'UsersUserManageBundle:users', 'u' )
                                    ->set( 'u.status', '0' )
                                    ->where( 'u.accountId = ?1' )                              
                                    ->setParameter( 1, $account_id )                              
                                    ->getQuery()->execute();
	}
	
	##
		 ## Function used to get agents
		 ## $agent_params = array()
		 ## $entity_manager = object
		 ## $apply_limit = boolean
		 ## return array() or false
     ##
	public function agents( $agent_params = null, $entity_manager = null , $apply_limit = false  ) {

	   $entity_manager = $this->getEntityManager(); //access entity manager from inside the repository
	     if( !is_array( $agent_params ) || !is_object( $entity_manager ) ) { ## Checking required params
           return false;
         }
       ## Query to get agent list
       $query = $entity_manager->createQueryBuilder()
                                        ->select( 'u' ) 
                                        ->from( 'UsersUserManageBundle:users', 'u' )
                                        ->where( 'u.userType = 4' )
										->andwhere('u.resellerId=:reseller_id')
                                        ->addOrderBy( 'u.id', 'DESC' );
         ## Setting limit on query 
         if($apply_limit)
         {
           $query = $query->setFirstResult( $agent_params[ 'offset' ] )
                          ->setMaxResults( $agent_params[ 'limit' ] );
         }
         
          $search_params = array();
           	 $search_params['reseller_id']	=  $agent_params[  'reseller_id'  ];
          if( !empty( $agent_params[ 'selected_tab'  ] ) && $agent_params[  'selected_tab'  ] != 3|| $agent_params[  'selected_tab'] == 0){
          
              $query = $query->andwhere( $query->expr()->eq( 'u.status', '?1'  ) );
              $search_params['1'] = $agent_params[ 'selected_tab'  ];
              
          }
          if( !empty( $agent_params[ 'search_option' ] ) && !empty( $agent_params[ 'search_value' ] ) ){
              
                switch( $agent_params[ 'search_option'  ] ){
                  CASE 'first_name':
                    $query = $query->andWhere( 'u.firstName=:first_name' );
                  break;
                  CASE 'last_name':
                    $query = $query->andWhere( 'u.lastName=:last_name' );
                  break;
                  CASE 'email':
                    $query = $query->andWhere( 'u.email=:email' );
                  break;
                }
                
                $search_params[ $agent_params[ 'search_option' ] ] = $agent_params[ 'search_value' ];
          } 
          ## Setting search parameters
          $query = $query->setParameters( $search_params );	              
          $query = $query->getQuery();
          
          return  $agents = $query->getArrayResult( ); // array of users objects   
    }		  
}
