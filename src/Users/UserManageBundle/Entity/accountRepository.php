<?php

namespace Users\UserManageBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * accountRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class accountRepository extends EntityRepository
{

       /**
         * __account_details() is used to fetch account details from database
         *       
         * Params : @$id type int or null     
         * Return : array();
       */ 
   public function account_details( $id = null ) {
       
      $entity_manager = $this->getEntityManager(); //access entity manager from inside the repository
	  return  $entity_manager->createQueryBuilder()
                                    ->select('a') 
                                    ->from('UsersUserManageBundle:account','a')
                                    ->where('a.id = :id')
                                    ->setParameter('id', $id)
                                    ->getQuery()
                                    ->getArrayResult( );
   }
   
   public function update_account( $request , $session ) {
             $id                 =  $request->get('id');
             $name               =  $request->get('name');
             $address            =  $request->get('address');
	     $address2           =  $request->get('address2');
             $email              =  $request->get('email');
             $zip_code           =  $request->get('zip_code');
             $primary_phone      =  $request->get('primary_phone');
             $secondary_phone    =  $request->get('secondary_phone');
             $city               =  $request->get('city');  
	     $modifiedDate       =  date("Y-m-d H:i:s");
	     $kr_was_clients     =  $request->get('kr_was_clients');
             $state_format       =  $request->get('state_format');
             $state_id           =  $request->get('state_id');
             $file               =  $request->files->get('file');
             $logo               =  !empty($file) ? $request->files->get('file')->getClientOriginalName() : '' ;
             $status             =  $request->get('status');

               $entity_manager = $this->getEntityManager(); //access entity manager from inside the repository
                $query = $entity_manager->createQueryBuilder()
                                        ->update('UsersUserManageBundle:account', 'a')
                                        ->set('a.name', ':name')
                                        ->set('a.address', ':address')
                                        ->set('a.address2', ':address2')
                                        ->set('a.city', ':city')
                                        ->set('a.zipCode', ':zip_code')
                                        ->set('a.primaryPhone', ':primary_phone') 
                                        ->set('a.secondaryPhone', ':secondary_phone')
                                        ->set('a.email', ':email')
                                        ->set('a.modifiedDate', ':modifiedDate')
                                        ->set('a.krWasClients', ':kr_was_clients')
                                        ->set('a.stateFormat', ':state_format')
                                        ->set('a.stateId', ':state_id')
                                        ->set('a.status', ':status');
                                         if(!empty($file)) {
                                          $query->set('a.logo', ':logo');
                                         }
                                        $query->where('a.id = ?1')
                                        ->setParameter('name', $name)
                                        ->setParameter('address', $address)
					->setParameter('address2', $address2)
                                        ->setParameter('city', $city)
                                        ->setParameter('zip_code', $zip_code)
                                        ->setParameter('primary_phone', $primary_phone)
                                        ->setParameter('secondary_phone', $secondary_phone)
                                        ->setParameter('email', $email)
                                        ->setParameter('modifiedDate', $modifiedDate)
                                        ->setParameter('kr_was_clients', $kr_was_clients)
                                        ->setParameter('state_format', $state_format)
                                        ->setParameter('state_id', $state_id)
                                        ->setParameter('status', $status);
                                         if(!empty($file)) {
                                         $query->setParameter('logo', $logo);
                                         }
                                         $query->setParameter(1, $id)
                                        ->getQuery()->execute();
   }
   
   
   public function inactive_account( $id ) {
           $entity_manager = $this->getEntityManager(); //access entity manager from inside the repository
            $query = $entity_manager->createQueryBuilder()
                                    ->update( 'UsersUserManageBundle:account', 'a' )
                                    ->set( 'a.status', '0' )
                                    ->where( 'a.id = ?1' )                              
                                    ->setParameter( 1, $id )                              
                                    ->getQuery()->execute();
    }
	
	public function validate_account_info( $request= null, $form = null, $session = null, $logo= null ){
	             $account = new account(); ##Creating user entity object (Users\UsermanageBundle\Entity\account)
	             $entity_manager = $this->getEntityManager(); //access entity manager from inside the repository
				 if($session->get( 'usertype' ) == 2) {
               		$reseller_id = $session->get( 'userid' );
                 }else {
				    $reseller_id = 0;
                 }				 
                  $account->setName( $form[ 'name' ]->getData() );
                  $account->setAddress( $form[ 'address']->getData() );
                  $account->setCity( $form[ 'city']->getData() );
                  
                  $account->setZipCode( $form[ 'zip_code']->getData() );
                  $account->setPrimaryPhone( $form[ 'primary_phone']->getData() );
                  $account->setAddress2( $form[ 'address2']->getData() );
                  $account->setStatus( $form[ 'status']->getData() );
				  if( $session->get( 'usertype' ) == 2) {
					  $account->setStateformat( $form[ 'state_format' ]->getData() );
					  $account->setKrWasClients( $form[ 'kr_was_clients' ]->getData() );
				  }
                  $account->setCreatedDate( date_create( date('Y-m-d H:i:s') ) );
                  $account->setSecondaryPhone( $form[ 'secondary_phone']->getData() );
                  $account->setEmail( $form[ 'email' ]->getData());
                  $account->setResellerId(  $reseller_id );				  
				  $account->setLogo( $logo );
                 
                  
                  $state = $entity_manager->getRepository('UsersUserManageBundle:state')->find($form[ 'state_id']->getData());
                  $account->setStateEntity($state);
                                  
                  $entity_manager->persist( $account ); 
                  
                  $entity_manager->flush();
                 
                
	}
	
	
	public function get_id( $request ) {
	
	     $account      = new account(); ##Creating user entity object (Users\UsermanageBundle\Entity\account)
		 $entity_manager = $this->getEntityManager(); //access entity manager from inside the repository
		 $account_name =  $request->get('name');
		 $query        = $entity_manager->createQuery(  'SELECT a.id FROM UsersUserManageBundle:account a 
                                                        WHERE
                                                        a.name = :name '
                             
                                                     );
		  ## Setting parameters to search                                    
		  $query->setParameters( array(   'name'      =>   $account_name,
									   )
								);
		 return $query->getArrayResult( ); //array of users objects
	}
	
	public function update_theme($request, $session) {
	   $theme = array('bg_color' => $request->get('bg_color') ,'font_color' => $request->get('font_color'), 'font_size' => $request->get('font_size'));
	   $theme_json = json_encode($theme);

		  $entity_manager = $this->getEntityManager(); //access entity manager from inside the repository
		           $query = $entity_manager->createQueryBuilder()
				                   ->update('UsersUserManageBundle:account', 'a')
                                                   ->set('a.themeSetting', ':theme')		
	                                           ->where('a.id = ?1')
					           ->setParameter('theme', $theme_json)
                                                   ->setParameter(1, $session->get( 'agent_account_id' ))
						   ->getQuery()->execute();
	}
        
        
       public function account_setting( $request, $id = null ) {

            $session = $request->getSession();
            $account_setting = serialize($request->request->all());
            $account = new account();
            $account_id = !empty(  $id  )?$id : $session->get('id');
            $entity_manager = $this->getEntityManager(); //access entity manager from inside the repository
              $query = $entity_manager->createQueryBuilder()
                                        ->update('UsersUserManageBundle:account', 'a')
                                        ->set('a.accountSetting', ':account_setting')
                                        ->where('a.id = ?1')
                                        ->setParameter('account_setting', $account_setting)
                                        -> setParameter(1, $account_id )
                                        ->getQuery()->execute();
              $session->remove('id');
              if( !empty(  $id  ) ) {
                $session->getFlashBag()
                    ->add('record_update_message', 'Account Setting Updated');  
              }else {
               $session->getFlashBag()
                    ->add('record_insert_message', 'Agent Added');
              }
       }
       
     
}
